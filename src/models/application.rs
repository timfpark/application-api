use std::collections::HashMap;

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

use super::templates_spec::TemplatesSpec;

/// Struct corresponding to the Specification (`spec`) part of the `Application` resource, directly
/// reflects context of the `applications.example.com.yaml` file to be found in this repository.
/// The `Application` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "example.com",
    version = "v1",
    kind = "Application",
    plural = "applications",
    derive = "PartialEq",
    namespaced
)]
pub struct ApplicationSpec {
    pub templates: TemplatesSpec,
    pub values: Option<HashMap<String, String>>,
}
