use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Clone, Debug, PartialEq, JsonSchema, Serialize, Deserialize)]
pub enum ClustersSpec {
    Count(u32),
    All,
}

/// Struct corresponding to the Specification (`spec`) part of the `ApplicationAssignment` resource, directly
/// reflects context of the `applicationassignments.microsoft.com.yaml` file to be found in this repository.
/// The `ApplicationAssigment` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "microsoft.com",
    version = "v1alpha1",
    kind = "ApplicationDeployment",
    plural = "applicationdeployments",
    derive = "PartialEq",
    namespaced
)]
pub struct ApplicationDeploymentSpec {
    // app.yaml pointer spec
    pub repo: String,
    pub reference: String,
    pub path: String,

    // how many stamps for this should be deployed
    pub clusters: ClustersSpec,

    pub selector: HashMap<String, String>,
    pub values: Option<HashMap<String, String>>,
}
